var searchIndex = {};
searchIndex['collect'] = {"items":[[0,"","collect","collect-rs is intended as an experimental extension of the Rust standard library's\nlibcollections. Ideas that are too niche, crazy, or experimental to land in libcollections\ncan be gathered here where they can gain the maintenance and network-effect benefits that\nlibcollections enjoys, but without worrying about such ivory tower concepts as\n\"general usefulness\" and \"consistency\"."],[1,"TreeMap","","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper."],[1,"TreeSet","","An implementation of a set on top of the `TreeMap` container."],[1,"TrieMap","","A map implemented as a radix trie."],[1,"TrieSet","","A set implemented as a radix trie."],[10,"clone","","",0],[10,"eq","","",0],[10,"partial_cmp","","",0],[10,"cmp","","",0],[10,"fmt","","",0],[10,"default","","",0],[10,"index","","",0],[10,"index_mut","","",0],[10,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",0],[10,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",0],[10,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",0],[10,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",0],[10,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",0],[10,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",0],[10,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",0],[10,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",0],[10,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",0],[10,"into_iter","","Gets a lazy iterator that consumes the treemap.",0],[10,"len","","Return the number of elements in the map.",0],[10,"is_empty","","Return true if the map contains no elements.",0],[10,"clear","","Clears the map, removing all values.",0],[10,"get","","Returns a reference to the value corresponding to the key.",0],[10,"contains_key","","Returns true if the map contains a value for the specified key.",0],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",0],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",0],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",0],[10,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0],[10,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0],[10,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",0],[10,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",0],[10,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",0],[10,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",0],[10,"from_iter","","",0],[10,"extend","","",0],[10,"hash","","",0],[10,"clone","","",1],[10,"eq","","",1],[10,"partial_cmp","","",1],[10,"cmp","","",1],[10,"fmt","","",1],[10,"default","","",1],[10,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",1],[10,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",1],[10,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",1],[10,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",1],[10,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",1],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",1],[10,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",1],[10,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",1],[10,"difference","","Visits the values representing the difference, in ascending order.",1],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",1],[10,"intersection","","Visits the values representing the intersection, in ascending order.",1],[10,"union","","Visits the values representing the union, in ascending order.",1],[10,"len","","Return the number of elements in the set",1],[10,"is_empty","","Returns true if the set contains no elements",1],[10,"clear","","Clears the set, removing all values.",1],[10,"contains","","Returns `true` if the set contains a value.",1],[10,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",1],[10,"is_subset","","Returns `true` if the set is a subset of another.",1],[10,"is_superset","","Returns `true` if the set is a superset of another.",1],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",1],[10,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",1],[10,"from_iter","","",1],[10,"extend","","",1],[10,"hash","","",1],[10,"clone","","",2],[10,"eq","","",2],[10,"partial_cmp","","",2],[10,"cmp","","",2],[10,"fmt","","",2],[10,"default","","",2],[10,"new","","Creates an empty `TrieMap`.",2],[10,"each_reverse","","Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",2],[10,"keys","","Gets an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `usize`.",2],[10,"values","","Gets an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r T`.",2],[10,"iter","","Gets an iterator over the key-value pairs in the map, ordered by keys.",2],[10,"iter_mut","","Gets an iterator over the key-value pairs in the map, with the\nability to mutate the values.",2],[10,"len","","Return the number of elements in the map.",2],[10,"is_empty","","Return true if the map contains no elements.",2],[10,"clear","","Clears the map, removing all values.",2],[10,"get","","Returns a reference to the value corresponding to the key.",2],[10,"contains_key","","Returns true if the map contains a value for the specified key.",2],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",2],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",2],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",2],[10,"lower_bound","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",2],[10,"upper_bound","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",2],[10,"lower_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",2],[10,"upper_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",2],[10,"from_iter","","",2],[10,"extend","","",2],[10,"hash","","",2],[10,"index","","",2],[10,"index_mut","","",2],[10,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",2],[10,"cmp","","",3],[10,"partial_cmp","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"hash","","",3],[10,"clone","","",3],[10,"fmt","","",3],[10,"default","","",3],[10,"new","","Creates an empty TrieSet.",3],[10,"each_reverse","","Visits all values in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",3],[10,"iter","","Gets an iterator over the values in the set, in sorted order.",3],[10,"lower_bound","","Gets an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",3],[10,"upper_bound","","Gets an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are less than or equal to `val` an empty iterator is returned.",3],[10,"difference","","Visits the values representing the difference, in ascending order.",3],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",3],[10,"intersection","","Visits the values representing the intersection, in ascending order.",3],[10,"union","","Visits the values representing the union, in ascending order.",3],[10,"len","","Return the number of elements in the set",3],[10,"is_empty","","Returns true if the set contains no elements",3],[10,"clear","","Clears the set, removing all values.",3],[10,"contains","","Returns `true` if the set contains a value.",3],[10,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",3],[10,"is_subset","","Returns `true` if the set is a subset of another.",3],[10,"is_superset","","Returns `true` if the set is a superset of another.",3],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",3],[10,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",3],[10,"from_iter","","",3],[10,"extend","","",3],[0,"compare","","Comparators."],[1,"Borrow","collect::compare","A comparator that borrows its parameters before comparing them."],[1,"Extract","","A comparator that extracts a sort key from a value."],[1,"Lexicographic","","A comparator that [lexicographically]\n(https://en.wikipedia.org/wiki/Lexicographical_order) combines two others."],[1,"Natural","","A comparator that delegates to [`Ord`]\n(http://doc.rust-lang.org/std/cmp/trait.Ord.html)."],[1,"Rev","","A comparator that reverses the ordering of another."],[1,"Swap","","A comparator that swaps another's parameters, maintaining the underlying ordering."],[3,"max","","Returns the maximum of two values according to the given comparator, or `lhs` if they\nare equal."],[3,"min","","Returns the minimum of two values according to the given comparator, or `lhs` if they\nare equal."],[6,"Compare","","A comparator imposing a [total order](https://en.wikipedia.org/wiki/Total_order)."],[9,"compare","","Compares two values, returning `Less`, `Equal`, or `Greater` if `lhs` is less\nthan, equal to, or greater than `rhs`, respectively.",4],[10,"compares_lt","","Checks if `lhs` is less than `rhs`.",4],[10,"compares_le","","Checks if `lhs` is less than or equal to `rhs`.",4],[10,"compares_ge","","Checks if `lhs` is greater than or equal to `rhs`.",4],[10,"compares_gt","","Checks if `lhs` is greater than `rhs`.",4],[10,"compares_eq","","Checks if `lhs` is equal to `rhs`.",4],[10,"compares_ne","","Checks if `lhs` is not equal to `rhs`.",4],[6,"CompareExt","","An extension trait with methods applicable to all comparators."],[10,"borrow","","Borrows the comparator's parameters before comparing them.",5],[10,"rev","","Reverses the ordering of the comparator.",5],[10,"swap","","Swaps the comparator's parameters, maintaining the underlying ordering.",5],[10,"then","","[Lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) combines\nthe comparator with another.",5],[10,"compare","","",6],[10,"compares_lt","","",6],[10,"compares_le","","",6],[10,"compares_ge","","",6],[10,"compares_gt","","",6],[10,"compares_eq","","",6],[10,"compares_ne","","",6],[10,"clone","","",6],[10,"default","","",6],[10,"eq","","",6],[10,"fmt","","",6],[10,"new","","Returns a comparator that extracts a sort key using `ext` and compares it using\n`cmp`.",7],[10,"compare","","",7],[10,"compares_lt","","",7],[10,"compares_le","","",7],[10,"compares_ge","","",7],[10,"compares_gt","","",7],[10,"compares_eq","","",7],[10,"compares_ne","","",7],[10,"clone","","",7],[10,"default","","",7],[10,"eq","","",7],[10,"fmt","","",7],[10,"fmt","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"default","","",8],[10,"clone","","",8],[10,"compare","","",8],[10,"compare","","",9],[10,"compares_lt","","",9],[10,"compares_le","","",9],[10,"compares_ge","","",9],[10,"compares_gt","","",9],[10,"compares_eq","","",9],[10,"compares_ne","","",9],[10,"clone","","",9],[10,"default","","",9],[10,"eq","","",9],[10,"fmt","","",9],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"default","","",10],[10,"clone","","",10],[10,"compare","","",10],[10,"compares_lt","","",10],[10,"compares_le","","",10],[10,"compares_ge","","",10],[10,"compares_gt","","",10],[10,"compares_eq","","",10],[10,"compares_ne","","",10],[10,"fmt","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"default","","",11],[10,"clone","","",11],[10,"compare","","",11],[10,"compares_lt","","",11],[10,"compares_le","","",11],[10,"compares_ge","","",11],[10,"compares_gt","","",11],[10,"compares_eq","","",11],[10,"compares_ne","","",11],[0,"iter","collect",""],[1,"InnerJoinMapIterator","collect::iter",""],[1,"InnerJoinMapSetIterator","",""],[1,"InnerJoinSetIterator","",""],[1,"OuterJoinIterator","",""],[10,"next","","",12],[10,"next","","",13],[10,"next","","",14],[10,"next","","",15],[6,"StringJoiner","","An Iterator adapter that walks through all the elements in the Iterator,\nconverts them to Strings and joins them to one big String, seperated by\nsome seperator string slice."],[9,"join","","Converts all elements the Iterator yields to Strings,\nthen combines them all into one String, seperated by sep.",16],[6,"OrderedMapIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a map like structure"],[10,"inner_join_map","","join two ordered maps together",17],[10,"inner_join_set","","filter an ordered map with an ordered set",17],[10,"outer_join","","Join an ordered iterator with the right ordered iterator. The\nnew iterator will return a key value pair for every key in\neither iterator. If a key is present in both iterators they\nwill be returned together (two values). If a value is in the Right,\nbut not the left iterator it will be return without the value in the\nleft iterator. If the value is in the left iterator by not the right\nthat will be return without the value from the left iterator.",17],[6,"OrderedSetIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a set like structure"],[10,"inner_join_map","","join two ordered maps together",18],[10,"inner_join_set","","filter an ordered map with an ordered set",18],[0,"blist","collect",""],[1,"BList","collect::blist","A skeleton implementation of a BList, based on the [Space-Efficient Linked List]\n(http://opendatastructures.org/ods-python/3_3_SEList_Space_Efficient_.html) described in\nOpen Data Structures."],[1,"Iter","","A by-ref iterator for a BList"],[1,"IterMut","","A by-mut-ref iterator for a BList"],[1,"IntoIter","","A by-value iterator for a BList"],[1,"Trav","",""],[1,"TravMut","",""],[1,"IntoTrav","",""],[10,"clone","","",19],[10,"new","","Creates a new BList with a reasonable choice for B.",19],[10,"with_b","","Creates a new BList with the specified B.",19],[10,"push_back","","Inserts the element at the back of the list.",19],[10,"push_front","","Inserts the element at the front of the list.",19],[10,"pop_back","","Removes and returns an element off the back of the list. Returns None if empty.",19],[10,"pop_front","","Removes and returns an element off the front of the list. Returns None if empty.",19],[10,"front","","Gets an immutable reference to the first element in the list.",19],[10,"back","","Gets an immutable reference to the last element in the list.",19],[10,"front_mut","","Gets a mutable reference to the first element in the list.",19],[10,"back_mut","","Gets a mutable reference to the last element in the list.",19],[10,"len","","Gets the number of elements in the list.",19],[10,"is_empty","","Returns `true` if the list contains no elements, or `false` otherwise.",19],[10,"clear","","Drops everything in the list.",19],[10,"iter","","Gets a by-reference iterator over the elements in the list.",19],[10,"iter_mut","","Gets a by-mutable-reference iterator over the elements in the list.",19],[10,"into_iter","","Gets a by-value iterator over the elements in the list.",19],[10,"traversal","","",19],[10,"traversal_mut","","",19],[10,"into_traversal","","",19],[10,"append_lazy","","Lazily moves the contents of `other` to the end of `self`, in the sense that it makes no\neffort to preserve the node-size lower-bound invariant. This can have negative effects\non the effeciency of the resulting list, but is otherwise much faster than a proper\ninvariant-preserving `append`.",19],[4,"Item","",""],[10,"next","","",20],[10,"size_hint","","",20],[10,"next_back","","",20],[4,"Item","",""],[10,"next","","",21],[10,"size_hint","","",21],[10,"next_back","","",21],[4,"Item","",""],[10,"next","","",22],[10,"size_hint","","",22],[10,"next_back","","",22],[4,"Item","",""],[10,"foreach","","",23],[4,"Item","",""],[10,"foreach","","",24],[4,"Item","",""],[10,"foreach","","",25],[10,"from_iter","","",19],[10,"extend","","",19],[10,"eq","","",19],[10,"ne","","",19],[10,"partial_cmp","","",19],[10,"cmp","","",19],[10,"fmt","","",19],[10,"hash","","",19],[0,"enum_set","collect","A structure for holding a set of enum variants."],[1,"EnumSet","collect::enum_set","A specialized set implementation to use enum types."],[1,"Iter","","An iterator over an EnumSet"],[6,"CLike","","An interface for casting C-like enum to u32 and back. A typical\nimplementation can be seen below:"],[9,"to_u32","","Converts a C-like enum to a `u32`.",26],[9,"from_u32","","Converts a `u32` to a C-like enum. This method only needs to be safe\nfor possible return values of `to_u32` of this trait.",26],[10,"cmp","","",27],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"fmt","","",27],[10,"hash","","",27],[10,"new","","Returns an empty `EnumSet`.",27],[10,"len","","Returns the number of elements in the given `EnumSet`.",27],[10,"is_empty","","Returns true if the `EnumSet` is empty.",27],[10,"clear","","",27],[10,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",27],[10,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",27],[10,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",27],[10,"union","","Returns the union of both `EnumSets`.",27],[10,"intersection","","Returns the intersection of both `EnumSets`.",27],[10,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",27],[10,"remove","","Removes an enum from the EnumSet",27],[10,"contains","","Returns `true` if an `EnumSet` contains a given enum.",27],[10,"iter","","Returns an iterator over an `EnumSet`.",27],[4,"Output","",""],[10,"sub","","",27],[4,"Output","",""],[10,"bitor","","",27],[4,"Output","",""],[10,"bitand","","",27],[4,"Output","",""],[10,"bitxor","","",27],[4,"Item","",""],[10,"next","","",28],[10,"size_hint","","",28],[10,"from_iter","","",27],[10,"extend","","",27],[0,"immut_slist","collect",""],[1,"Iter","collect::immut_slist","An iterator over the items of an ImmutSList"],[1,"ImmutSList","","An immutable singly-linked list, as seen in basically every functional language"],[10,"clone","","",29],[10,"new","","Constructs a new, empty `ImmutSList`",30],[10,"append","","Returns a copy of the list, with `elem` appended to the front",30],[10,"head","","Returns a reference to the first element in the list",30],[10,"tail","","Returns a copy of the list, with the first element removed",30],[10,"tailn","","Returns a copy of the list, with the first `n` elements removed",30],[10,"last","","Returns the last element in the list",30],[10,"lastn","","Returns a copy of the list, with only the last `n` elements remaining",30],[10,"iter","","Returns an iterator over references to the elements of the list in order",30],[10,"len","","",30],[10,"is_empty","","",30],[10,"drop","","",30],[4,"Item","",""],[10,"next","","",29],[10,"size_hint","","",29],[10,"from_iter","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"partial_cmp","","",30],[10,"clone","","",30],[10,"fmt","","",30],[10,"hash","","",30],[0,"interval_heap","collect","A double-ended priority queue implemented with an interval heap."],[1,"IntervalHeap","collect::interval_heap","An `IntervalHeap` is an implementation of a double-ended priority queue.\nAs such, it supports the following operations: `push`, `get_min`,\n`get_max`, `pop_min`, `pop_max` where insertion takes amortized O(log n)\ntime, removal takes O(log n) time and accessing minimum and maximum can\nbe done in constant time. Also, other convenient functions are provided\nthat handle conversion from and into vectors and allow iteration etc."],[1,"Iter","","`IntervalHeap` iterator."],[10,"clone","","",31],[10,"default","","Returns an empty heap ordered according to a default comparator.",31],[10,"new","","Returns an empty heap ordered according to the natural order of its elements.",31],[10,"with_capacity","","Returns an empty heap with the given capacity and ordered according to the\nnatural order of its elements.",31],[10,"from_vec","","Returns a heap containing all the elements of the given vector and ordered\naccording to the natural order of its elements.",31],[10,"with_comparator","","Returns an empty heap ordered according to the given comparator.",31],[10,"with_capacity_and_comparator","","Returns an empty heap with the given capacity and ordered according to the given\ncomparator.",31],[10,"from_vec_and_comparator","","Returns a heap containing all the elements of the given vector and ordered\naccording to the given comparator.",31],[10,"iter","","An iterator visiting all values in underlying vector,\nin arbitrary order.",31],[10,"get_min","","Returns a reference to the smallest item or None (if empty).",31],[10,"get_max","","Returns a reference to the greatest item or None (if empty).",31],[10,"get_min_max","","Returns references to the smallest and greatest item or None (if empty).",31],[10,"capacity","","Returns the number of items the interval heap could hold\nwithout reallocation.",31],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements\nto be inserted in the given `IntervalHeap`. Does nothing if the capacity\nis already sufficient.",31],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `IntervalHeap`. The collection may reserve more space to avoid\nfrequent reallocations.",31],[10,"shrink_to_fit","","Discards as much additional capacity as possible.",31],[10,"pop_min","","Removes the smallest item and returns it, or None if is empty.",31],[10,"pop_max","","Removes the greatest item and returns it, or None if is empty.",31],[10,"push","","Pushes an item onto the queue.",31],[10,"into_vec","","Consumes the `IntervalHeap` and returns the underlying vector\nin arbitrary order.",31],[10,"into_sorted_vec","","Consumes the `IntervalHeap` and returns a vector in sorted\n(ascending) order.",31],[10,"len","","Returns the number of items in the interval heap",31],[10,"is_empty","","Returns true if the queue contains no items.",31],[10,"clear","","Drops all items from the queue.",31],[10,"from_iter","","Creates an interval heap with all the items from an iterator",31],[10,"extend","","Extends the interval heap by a new chunk of items given by\nan iterator.",31],[4,"Item","",""],[10,"next","","",32],[10,"size_hint","","",32],[0,"linked_hash_map","collect","A HashMap wrapper that holds key-value pairs in insertion order."],[1,"LinkedHashMap","collect::linked_hash_map","A linked hash map."],[1,"Iter","",""],[1,"IterMut","",""],[1,"Keys","",""],[1,"Values","",""],[10,"new","","Creates a linked hash map.",33],[10,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is\nreturned.",33],[10,"get","","Returns the value corresponding to the key in the map.",33],[10,"get_mut","","Returns the mutable reference corresponding to the key in the map.",33],[10,"get_refresh","","Returns the value corresponding to the key in the map.",33],[10,"remove","","Removes and returns the value corresponding to the key from the map.",33],[10,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",33],[10,"pop_front","","Removes the first entry.",33],[10,"len","","Returns the number of key-value pairs in the map.",33],[10,"is_empty","","Returns whether the map is currently empty.",33],[10,"clear","","Clear the map of all key-value pairs.",33],[10,"iter","","A double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&'a K, &'a V)`",33],[10,"iter_mut","","A double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&'a K, &'a mut V)`\n# Examples\n```rust\nuse collect::LinkedHashMap;",33],[10,"keys","","A double-ended iterator visiting all key in order of insertion.",33],[10,"values","","A double-ended iterator visiting all values in order of insertion.",33],[4,"Output","",""],[10,"index","","",33],[4,"Output","",""],[10,"index_mut","","",33],[10,"extend","","",33],[10,"fmt","","Returns a string that lists the key-value pairs in insertion order.",33],[10,"drop","","",33],[4,"Item","",""],[10,"next","","",34],[10,"size_hint","","",34],[4,"Item","",""],[10,"next","","",35],[10,"size_hint","","",35],[10,"next_back","","",34],[10,"next_back","","",35],[4,"Item","",""],[10,"next","","",36],[10,"size_hint","","",36],[10,"next_back","","",36],[4,"Item","",""],[10,"next","","",37],[10,"size_hint","","",37],[10,"next_back","","",37],[0,"lru_cache","collect","A cache that holds a limited number of key-value pairs. When the\ncapacity of the cache is exceeded, the least-recently-used\n(where \"used\" means a look-up or putting the pair into the cache)\npair is automatically removed."],[1,"LruCache","collect::lru_cache","An LRU Cache."],[10,"new","","Create an LRU Cache that holds at most `capacity` items.",38],[10,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is\nreturned.",38],[10,"get","","Return a value corresponding to the key in the cache.",38],[10,"remove","","Remove and return a value corresponding to the key from the cache.",38],[10,"capacity","","Return the maximum number of key-value pairs the cache can hold.",38],[10,"set_capacity","","Change the number of key-value pairs the cache can hold. Remove\nleast-recently-used key-value pairs if necessary.",38],[10,"len","","Return the number of key-value pairs in the cache.",38],[10,"is_empty","","Returns whether the cache is currently empty.",38],[10,"clear","","Clear the cache of all key-value pairs.",38],[10,"extend","","",38],[10,"fmt","","Return a string that lists the key-value pairs from most-recently\nused to least-recently used.",38],[0,"tree_map","collect",""],[1,"TreeMap","collect::tree_map","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper."],[1,"Iter","","Lazy forward iterator over a map"],[1,"RevIter","","Lazy backward iterator over a map"],[1,"IterMut","","Lazy forward iterator over a map that allows for the mutation of\nthe values."],[1,"RevIterMut","","Lazy backward iterator over a map"],[1,"Keys","","TreeMap keys iterator."],[1,"Values","","TreeMap values iterator."],[1,"IntoIter","","Lazy forward iterator over a map that consumes the map while iterating"],[10,"clone","collect","",0],[10,"eq","","",0],[10,"partial_cmp","","",0],[10,"cmp","","",0],[10,"fmt","","",0],[10,"default","","",0],[4,"Output","collect::tree_map",""],[10,"index","collect","",0],[4,"Output","collect::tree_map",""],[10,"index_mut","collect","",0],[10,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",0],[10,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",0],[10,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",0],[10,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",0],[10,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",0],[10,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",0],[10,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",0],[10,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",0],[10,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",0],[10,"into_iter","","Gets a lazy iterator that consumes the treemap.",0],[10,"len","","Return the number of elements in the map.",0],[10,"is_empty","","Return true if the map contains no elements.",0],[10,"clear","","Clears the map, removing all values.",0],[10,"get","","Returns a reference to the value corresponding to the key.",0],[10,"contains_key","","Returns true if the map contains a value for the specified key.",0],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",0],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",0],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",0],[10,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0],[10,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0],[10,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",0],[10,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",0],[10,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",0],[10,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",0],[4,"Item","collect::tree_map",""],[10,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",39],[10,"size_hint","","",39],[4,"Item","",""],[10,"next","","",40],[10,"size_hint","","",40],[4,"Item","",""],[10,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",41],[10,"size_hint","","",41],[4,"Item","",""],[10,"next","","",42],[10,"size_hint","","",42],[4,"Item","",""],[10,"next","","",43],[10,"size_hint","","",43],[4,"Item","",""],[10,"next","","",44],[10,"size_hint","","",44],[4,"Item","",""],[10,"next","","",45],[10,"size_hint","","",45],[10,"from_iter","collect","",0],[10,"extend","","",0],[10,"hash","","",0],[0,"tree_set","",""],[1,"TreeSet","collect::tree_set","An implementation of a set on top of the `TreeMap` container."],[1,"Iter","","A lazy forward iterator over a set."],[1,"RevIter","","A lazy backward iterator over a set."],[1,"IntoIter","","A lazy forward iterator over a set that consumes the set while iterating."],[1,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[1,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[1,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[1,"Union","","A lazy iterator producing elements in the set union (in-order)."],[10,"clone","collect","",1],[10,"eq","","",1],[10,"partial_cmp","","",1],[10,"cmp","","",1],[10,"fmt","","",1],[10,"default","","",1],[10,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",1],[10,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",1],[10,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",1],[10,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",1],[10,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",1],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",1],[10,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",1],[10,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",1],[10,"difference","","Visits the values representing the difference, in ascending order.",1],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",1],[10,"intersection","","Visits the values representing the intersection, in ascending order.",1],[10,"union","","Visits the values representing the union, in ascending order.",1],[10,"len","","Return the number of elements in the set",1],[10,"is_empty","","Returns true if the set contains no elements",1],[10,"clear","","Clears the set, removing all values.",1],[10,"contains","","Returns `true` if the set contains a value.",1],[10,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",1],[10,"is_subset","","Returns `true` if the set is a subset of another.",1],[10,"is_superset","","Returns `true` if the set is a superset of another.",1],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",1],[10,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",1],[4,"Item","collect::tree_set",""],[10,"next","","",46],[10,"size_hint","","",46],[4,"Item","",""],[10,"next","","",47],[10,"size_hint","","",47],[4,"Item","",""],[10,"next","","",48],[10,"size_hint","","",48],[4,"Item","",""],[10,"next","","",49],[4,"Item","",""],[10,"next","","",50],[4,"Item","",""],[10,"next","","",51],[4,"Item","",""],[10,"next","","",52],[4,"Output","",""],[4,"Output","",""],[4,"Output","",""],[4,"Output","",""],[10,"from_iter","collect","",1],[10,"extend","","",1],[10,"hash","","",1],[0,"trie_map","",""],[1,"TrieMap","collect::trie_map","A map implemented as a radix trie."],[1,"OccupiedEntry","","A view into an occupied entry in a TrieMap."],[1,"VacantEntry","","A view into a vacant entry in a TrieMap."],[1,"Iter","","A forward iterator over a map."],[1,"IterMut","","A forward iterator over the key-value pairs of a map, with the\nvalues being mutable."],[2,"Entry","","A view into a single entry in a TrieMap, which may be vacant or occupied."],[12,"Occupied","","An occupied entry.",53],[12,"Vacant","","A vacant entry.",53],[4,"Keys","","A forward iterator over the keys of a map."],[4,"Values","","A forward iterator over the values of a map."],[10,"clone","collect","",2],[10,"eq","","",2],[10,"partial_cmp","","",2],[10,"cmp","","",2],[10,"fmt","","",2],[10,"default","","",2],[10,"new","","Creates an empty `TrieMap`.",2],[10,"each_reverse","","Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",2],[10,"keys","","Gets an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `usize`.",2],[10,"values","","Gets an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r T`.",2],[10,"iter","","Gets an iterator over the key-value pairs in the map, ordered by keys.",2],[10,"iter_mut","","Gets an iterator over the key-value pairs in the map, with the\nability to mutate the values.",2],[10,"len","","Return the number of elements in the map.",2],[10,"is_empty","","Return true if the map contains no elements.",2],[10,"clear","","Clears the map, removing all values.",2],[10,"get","","Returns a reference to the value corresponding to the key.",2],[10,"contains_key","","Returns true if the map contains a value for the specified key.",2],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",2],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",2],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",2],[10,"lower_bound","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",2],[10,"upper_bound","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",2],[10,"lower_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",2],[10,"upper_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",2],[10,"from_iter","","",2],[10,"extend","","",2],[10,"hash","","",2],[4,"Output","collect::trie_map",""],[10,"index","collect","",2],[4,"Output","collect::trie_map",""],[10,"index_mut","collect","",2],[10,"get","collect::trie_map","Returns a mutable reference to the value if occupied, or the `VacantEntry` if\nvacant.",53],[10,"entry","collect","Gets the given key's corresponding entry in the map for in-place manipulation.",2],[10,"get","collect::trie_map","Gets a reference to the value in the entry.",54],[10,"get_mut","","Gets a mutable reference to the value in the entry.",54],[10,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry,\nwith a lifetime bound to the map itself.",54],[10,"insert","","Sets the value of the entry, and returns the entry's old value.",54],[10,"remove","","Takes the value out of the entry, and returns it.",54],[10,"insert","","Set the vacant entry to the given value.",55],[4,"Item","",""],[10,"next","","",56],[10,"size_hint","","",56],[4,"Item","",""],[10,"next","","",57],[10,"size_hint","","",57],[0,"trie_set","collect",""],[1,"TrieSet","collect::trie_set","A set implemented as a radix trie."],[1,"Iter","","A forward iterator over a set."],[1,"Difference","","An iterator producing elements in the set difference (in-order)."],[1,"SymmetricDifference","","An iterator producing elements in the set symmetric difference (in-order)."],[1,"Intersection","","An iterator producing elements in the set intersection (in-order)."],[1,"Union","","An iterator producing elements in the set union (in-order)."],[10,"cmp","collect","",3],[10,"partial_cmp","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"hash","","",3],[10,"clone","","",3],[10,"fmt","","",3],[10,"default","","",3],[10,"new","","Creates an empty TrieSet.",3],[10,"each_reverse","","Visits all values in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",3],[10,"iter","","Gets an iterator over the values in the set, in sorted order.",3],[10,"lower_bound","","Gets an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",3],[10,"upper_bound","","Gets an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are less than or equal to `val` an empty iterator is returned.",3],[10,"difference","","Visits the values representing the difference, in ascending order.",3],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",3],[10,"intersection","","Visits the values representing the intersection, in ascending order.",3],[10,"union","","Visits the values representing the union, in ascending order.",3],[10,"len","","Return the number of elements in the set",3],[10,"is_empty","","Returns true if the set contains no elements",3],[10,"clear","","Clears the set, removing all values.",3],[10,"contains","","Returns `true` if the set contains a value.",3],[10,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",3],[10,"is_subset","","Returns `true` if the set is a subset of another.",3],[10,"is_superset","","Returns `true` if the set is a superset of another.",3],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",3],[10,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",3],[10,"from_iter","","",3],[10,"extend","","",3],[4,"Output","collect::trie_set",""],[4,"Output","",""],[4,"Output","",""],[4,"Output","",""],[4,"Item","",""],[10,"next","","",58],[10,"size_hint","","",58],[4,"Item","",""],[10,"next","","",59],[4,"Item","",""],[10,"next","","",60],[4,"Item","",""],[10,"next","","",61],[4,"Item","",""],[10,"next","","",62],[0,"proto","collect",""],[0,"dlist","collect::proto",""],[1,"DList","collect::proto::dlist","An experimental rewrite of DList to provide a more cursor-oriented API."],[1,"Cursor","","A Cursor is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the list during iteration. This is because the lifetime of its yielded\nreferences are tied to its own lifetime, instead of just the underlying list. This means\ncursors cannot yield multiple elements at once."],[1,"Iter","","An iterator over references to the items of a `DList`."],[1,"IterMut","","An iterator over mutable references to the items of a `DList`."],[1,"IntoIter","","An iterator over mutable references to the items of a `DList`."],[10,"new","","Makes a new DList.",63],[10,"push_back","","Appends an element to the back of the list.",63],[10,"push_front","","Appends an element to the front of the list.",63],[10,"pop_back","","Removes the element at back of the list. Returns None if the list is empty.",63],[10,"pop_front","","Removes the element at front of the list. Returns None if the list is empty.",63],[10,"front","","Gets the element at the front of the list, or None if empty.",63],[10,"back","","Gets the element at the back of the list, or None if empty.",63],[10,"front_mut","","Gets the element at the front of the list mutably, or None if empty.",63],[10,"back_mut","","Gets the element at the back of the list mutably, or None if empty.",63],[10,"insert","","Inserts an element at the given index.",63],[10,"remove","","Removes the element at the given index. Returns None if the index is out of bounds.",63],[10,"split_at","","Splits the list into two lists at the given index. Returns the right side of the split.\nReturns an empty list if index is out of bounds.",63],[10,"append","","Appends the given list to the end of this one. The old list will be empty afterwards.",63],[10,"splice","","Inserts the given list at the given index. The old list will be empty afterwards.",63],[10,"len","","Gets the number of elements in the list.",63],[10,"is_empty","","Whether the list is empty.",63],[10,"clear","","Removes all elements from the list.",63],[10,"cursor","","Gets a cursor over the list.",63],[10,"iter","","Provides a forward iterator.",63],[10,"iter_mut","","Provides a forward iterator with mutable references.",63],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",63],[10,"reset","","Resets the cursor to lie between the first and last element in the list.",64],[10,"next","","Gets the next element in the list.",64],[10,"prev","","Gets the previous element in the list.",64],[10,"peek_next","","Gets the next element in the list, without moving the cursor head.",64],[10,"peek_prev","","Gets the previous element in the list, without moving the cursor head.",64],[10,"insert","","Inserts an element at the cursor's location in the list, and moves the cursor head to\nlie before it. Therefore, the new element will be yielded by the next call to `next`.",64],[10,"remove","","Removes the next element in the list, without moving the cursor. Returns None if the list\nis empty, or if `next` is the ghost element",64],[10,"split","","",64],[10,"splice","","Inserts the entire list's contents right after the cursor.",64],[10,"seek_forward","","Calls `next` the specified number of times.",64],[10,"seek_backward","","Calls `prev` the specified number of times.",64],[10,"clone","","",65],[10,"clone","","",66],[4,"Item","",""],[10,"next","","",65],[10,"size_hint","","",65],[10,"next_back","","",65],[4,"Item","",""],[10,"next","","",67],[10,"size_hint","","",67],[10,"next_back","","",67],[4,"Item","",""],[10,"next","","",66],[10,"size_hint","","",66],[10,"next_back","","",66],[10,"drop","","",63],[10,"from_iter","","",63],[10,"extend","","",63],[10,"eq","","",63],[10,"ne","","",63],[10,"partial_cmp","","",63],[10,"cmp","","",63],[10,"fmt","","",63],[10,"hash","","",63],[10,"clone","","",63],[0,"linear_map","collect::proto","A module providing a map implementation `LinearMap` backed by a vector."],[1,"LinearMap","collect::proto::linear_map","A very simple map implementation backed by a vector."],[1,"Iter","","The iterator returned by `LinearMap::iter`."],[1,"IterMut","","The iterator returned by `LinearMap::iter_mut`."],[1,"Keys","","The iterator returned by `LinearMap::keys`."],[1,"Values","","The iterator returned by `LinearMap::values`."],[10,"default","","",68],[10,"clone","","",68],[10,"new","","Creates an empty map. This method does not allocate.",68],[10,"with_capacity","","Creates an empty map with the given initial capacity.",68],[10,"capacity","","Returns the number of elements the map can hold without reallocating.",68],[10,"reserve","","Reserves capacity for at least `additional` more to be inserted in the\nmap. The collection may reserve more space to avoid frequent\nreallocations.",68],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to\nbe inserted in the map.",68],[10,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",68],[10,"len","","Returns the number of elements in the map.",68],[10,"is_empty","","Returns true if the map contains no elements.",68],[10,"clear","","Clears the map, removing all elements. Keeps the allocated memory for\nreuse.",68],[10,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator\nelement type is `(&'a K, &'a V)`.",68],[10,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order with\nmutable references to the values. Iterator element type is `(&'a K, &'a\nmut V)`.",68],[10,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type\nis `&'a K`.",68],[10,"values","","An iterator visiting all values in arbitrary order. Iterator element\ntype is `&'a V`.",68],[10,"get","","Returns a reference to the value corresponding to the key.",68],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",68],[10,"contains_key","","Returns true if the map contains a value to the specified key.",68],[10,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, it is returned. Otherwise, `None` is returned.",68],[10,"remove","","Removes a key-value pair from the map. If the key had a value present\nin the map, it is returned. Otherwise, `None` is returned.",68],[4,"Item","",""],[10,"next","","",69],[10,"size_hint","","",69],[4,"Item","",""],[10,"next","","",70],[10,"size_hint","","",70],[4,"Item","",""],[10,"next","","",71],[10,"size_hint","","",71],[4,"Item","",""],[10,"next","","",72],[10,"size_hint","","",72],[10,"clone","","",69],[10,"clone","","",71],[10,"clone","","",72],[10,"next_back","","",69],[10,"next_back","","",70],[10,"next_back","","",71],[10,"next_back","","",72],[0,"par_vec","collect::proto",""],[1,"ParVec","collect::proto::par_vec","A vector that can be operated on concurrently via non-overlapping slices."],[1,"ParSlice","","A slice of `ParVec` that can be sent to another task for processing.\nAutomatically releases the slice on drop."],[10,"new","","Create a new `ParVec`, returning it and a vector of slices that can be sent\nto other threads and mutated concurrently.",73],[10,"into_inner_opt","","Take the inner `Vec` if there are no slices remaining.\nReturns `Err(self)` if there are still slices out there.",73],[10,"into_inner","","Take the inner `Vec`, waiting until all slices have been freed.",73],[4,"Target","",""],[10,"deref","","",74],[10,"deref_mut","","",74],[10,"fmt","","",74],[10,"next","collect::tree_map","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",39],[10,"size_hint","","",39],[10,"next","","",40],[10,"size_hint","","",40],[10,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",41],[10,"size_hint","","",41],[10,"next","","",42],[10,"size_hint","","",42],[10,"next","","",43],[10,"size_hint","","",43],[10,"next","","",44],[10,"size_hint","","",44],[10,"next","","",45],[10,"size_hint","","",45],[10,"next","collect::tree_set","",46],[10,"size_hint","","",46],[10,"next","","",47],[10,"size_hint","","",47],[10,"next","","",48],[10,"size_hint","","",48],[10,"next","","",49],[10,"next","","",50],[10,"next","","",51],[10,"next","","",52],[10,"get","collect::trie_map","Returns a mutable reference to the value if occupied, or the `VacantEntry` if\nvacant.",53],[10,"get","","Gets a reference to the value in the entry.",54],[10,"get_mut","","Gets a mutable reference to the value in the entry.",54],[10,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry,\nwith a lifetime bound to the map itself.",54],[10,"insert","","Sets the value of the entry, and returns the entry's old value.",54],[10,"remove","","Takes the value out of the entry, and returns it.",54],[10,"insert","","Set the vacant entry to the given value.",55],[10,"next","","",56],[10,"size_hint","","",56],[10,"next","","",57],[10,"size_hint","","",57],[10,"next","collect::trie_set","",58],[10,"size_hint","","",58],[10,"next","","",59],[10,"next","","",60],[10,"next","","",61],[10,"next","","",62],[10,"inner_join_map","collect::iter","join two ordered maps together",17],[10,"inner_join_set","","filter an ordered map with an ordered set",17],[10,"outer_join","","Join an ordered iterator with the right ordered iterator. The\nnew iterator will return a key value pair for every key in\neither iterator. If a key is present in both iterators they\nwill be returned together (two values). If a value is in the Right,\nbut not the left iterator it will be return without the value in the\nleft iterator. If the value is in the left iterator by not the right\nthat will be return without the value from the left iterator.",17],[10,"inner_join_map","","join two ordered maps together",18],[10,"inner_join_set","","filter an ordered map with an ordered set",18]],"paths":[[1,"TreeMap"],[1,"TreeSet"],[1,"TrieMap"],[1,"TrieSet"],[6,"Compare"],[6,"CompareExt"],[1,"Borrow"],[1,"Extract"],[1,"Lexicographic"],[1,"Natural"],[1,"Rev"],[1,"Swap"],[1,"InnerJoinMapIterator"],[1,"InnerJoinSetIterator"],[1,"InnerJoinMapSetIterator"],[1,"OuterJoinIterator"],[6,"StringJoiner"],[6,"OrderedMapIterator"],[6,"OrderedSetIterator"],[1,"BList"],[1,"Iter"],[1,"IterMut"],[1,"IntoIter"],[1,"Trav"],[1,"TravMut"],[1,"IntoTrav"],[6,"CLike"],[1,"EnumSet"],[1,"Iter"],[1,"Iter"],[1,"ImmutSList"],[1,"IntervalHeap"],[1,"Iter"],[1,"LinkedHashMap"],[1,"Iter"],[1,"IterMut"],[1,"Keys"],[1,"Values"],[1,"LruCache"],[1,"Iter"],[1,"RevIter"],[1,"IterMut"],[1,"RevIterMut"],[1,"IntoIter"],[1,"Keys"],[1,"Values"],[1,"Iter"],[1,"RevIter"],[1,"IntoIter"],[1,"Difference"],[1,"SymmetricDifference"],[1,"Intersection"],[1,"Union"],[2,"Entry"],[1,"OccupiedEntry"],[1,"VacantEntry"],[1,"Iter"],[1,"IterMut"],[1,"Iter"],[1,"Difference"],[1,"SymmetricDifference"],[1,"Intersection"],[1,"Union"],[1,"DList"],[1,"Cursor"],[1,"Iter"],[1,"IntoIter"],[1,"IterMut"],[1,"LinearMap"],[1,"Iter"],[1,"IterMut"],[1,"Keys"],[1,"Values"],[1,"ParVec"],[1,"ParSlice"]]};
searchIndex['traverse'] = {"items":[[0,"","traverse","Proof-of-concept trait for internal iterators."],[1,"Internal","",""],[1,"Map","","An Traversal that maps over the contents of\nanother Traversal."],[1,"Filter","",""],[1,"FilterMap","",""],[1,"Enumerate","",""],[1,"Skip","",""],[1,"Take","",""],[1,"SkipWhile","",""],[1,"TakeWhile","",""],[1,"Inspect","",""],[1,"Chain","",""],[1,"FlatMap","",""],[1,"Cloned","",""],[10,"foreach","","",0],[10,"foreach","","",1],[10,"foreach","","",2],[10,"foreach","","",3],[10,"foreach","","",4],[10,"foreach","","",5],[10,"foreach","","",6],[10,"foreach","","",7],[10,"foreach","","",8],[10,"foreach","","",9],[10,"foreach","","",10],[10,"foreach","","",11],[10,"collect","collections::vec","",12],[0,"utils","traverse",""],[1,"Counter","traverse::utils","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[1,"Range","","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[1,"Repeat","","An iterator that repeats an element endlessly"],[1,"Iterate","","An iterator that repeatedly applies a given function, starting\nfrom a given seed value."],[3,"count","","Creates a new counter with the specified start/step"],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[3,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[10,"clone","","",13],[4,"Item","",""],[10,"foreach","","",13],[10,"clone","","",14],[4,"Item","",""],[10,"foreach","","",14],[10,"clone","","",15],[4,"Item","",""],[10,"foreach","","",15],[10,"clone","","",16],[4,"Item","",""],[10,"foreach","","",16],[10,"clone","","",17],[4,"Item","",""],[10,"foreach","","",17],[10,"clone","","",18],[4,"Item","",""],[10,"foreach","","",18],[10,"clone","","",19],[4,"Item","",""],[10,"foreach","","",19],[6,"Traversal","traverse","An iterator that runs all at once"],[17,"Item","traverse::Traversal",""],[9,"foreach","traverse","Run this Iterator using the provided closure.",20],[10,"run","","Run this Iterator using the provided closure.",20],[10,"map","","",20],[10,"filter","","",20],[10,"filter_map","","",20],[10,"enumerate","","",20],[10,"skip","","",20],[10,"take","","",20],[10,"skip_while","","",20],[10,"take_while","","",20],[10,"inspect","","",20],[10,"flat_map","","",20],[10,"chain","","",20],[10,"count","","",20],[10,"cloned","","",20],[10,"collect","","",20],[6,"FromTraversal","",""],[9,"collect","","",21],[6,"IntoTraversal","",""],[9,"into_traversal","","",22],[4,"Item","",""],[10,"foreach","","",23],[10,"clone","","",0],[10,"clone","","",1],[10,"clone","","",2],[10,"clone","","",3],[10,"clone","","",4],[10,"clone","","",5],[10,"clone","","",6],[10,"clone","","",7],[10,"clone","","",8],[10,"clone","","",9],[10,"clone","","",10],[10,"clone","","",11]],"paths":[[1,"Map"],[1,"Filter"],[1,"FilterMap"],[1,"Enumerate"],[1,"Skip"],[1,"Take"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Inspect"],[1,"Chain"],[1,"FlatMap"],[1,"Cloned"],[1,"Vec"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[1,"Iterate"],[6,"Traversal"],[6,"FromTraversal"],[6,"IntoTraversal"],[1,"Internal"]]};

initSearch(searchIndex);
