var searchIndex = {};
searchIndex['collect'] = {"items":[[0,"","collect","collect-rs is intended as an experimental extension of the Rust standard library's\nlibcollections. Ideas that are too niche, crazy, or experimental to land in libcollections\ncan be gathered here where they can gain the maintenance and network-effect benefits that\nlibcollections enjoys, but without worrying about such ivory tower concepts as\n\"general usefulness\" and \"consistency\".",null,null],[0,"iter","","",null,null],[8,"StringJoiner","collect::iter","An Iterator adapter that walks through all the elements in the Iterator,\nconverts them to Strings and joins them to one big String, seperated by\nsome seperator string slice.",null,null],[10,"join","","Converts all elements the Iterator yields to Strings,\nthen combines them all into one String, seperated by sep.",0,{"inputs":[{"name":"stringjoiner"},{"name":"str"}],"output":{"name":"string"}}],[0,"immut_slist","collect","",null,null],[3,"Iter","collect::immut_slist","An iterator over the items of an ImmutSList",null,null],[3,"ImmutSList","","An immutable singly-linked list, as seen in basically every functional language",null,null],[11,"clone","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"new","","Constructs a new, empty `ImmutSList`",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"append","","Returns a copy of the list, with `elem` appended to the front",2,{"inputs":[{"name":"immutslist"},{"name":"t"}],"output":{"name":"immutslist"}}],[11,"head","","Returns a reference to the first element in the list",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"option"}}],[11,"tail","","Returns a copy of the list, with the first element removed",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"tailn","","Returns a copy of the list, with the first `n` elements removed",2,{"inputs":[{"name":"immutslist"},{"name":"usize"}],"output":{"name":"immutslist"}}],[11,"last","","Returns the last element in the list",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"option"}}],[11,"lastn","","Returns a copy of the list, with only the last `n` elements remaining",2,{"inputs":[{"name":"immutslist"},{"name":"usize"}],"output":{"name":"immutslist"}}],[11,"iter","","Returns an iterator over references to the elements of the list in order",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"iter"}}],[11,"len","","",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"usize"}}],[11,"is_empty","","",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"drop","","",2,{"inputs":[{"name":"immutslist"}],"output":null}],[6,"Item","","",null,null],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"from_iter","","",2,{"inputs":[{"name":"immutslist"},{"name":"i"}],"output":{"name":"immutslist"}}],[11,"eq","","",2,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"fmt","","",2,{"inputs":[{"name":"immutslist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"immutslist"},{"name":"h"}],"output":null}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[0,"proto","collect","",null,null],[0,"linear_map","collect::proto","A module providing a map implementation `LinearMap` backed by a vector.",null,null],[3,"LinearMap","collect::proto::linear_map","A very simple map implementation backed by a vector.",null,null],[3,"Iter","","The iterator returned by `LinearMap::iter`.",null,null],[3,"IterMut","","The iterator returned by `LinearMap::iter_mut`.",null,null],[3,"Keys","","The iterator returned by `LinearMap::keys`.",null,null],[3,"Values","","The iterator returned by `LinearMap::values`.",null,null],[11,"default","","",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"clone","","",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"new","","Creates an empty map. This method does not allocate.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"with_capacity","","Creates an empty map with the given initial capacity.",3,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":{"name":"linearmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more to be inserted in the\nmap. The collection may reserve more space to avoid frequent\nreallocations.",3,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to\nbe inserted in the map.",3,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",3,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"len","","Returns the number of elements in the map.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all elements. Keeps the allocated memory for\nreuse.",3,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator\nelement type is `(&'a K, &'a V)`.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order with\nmutable references to the values. Iterator element type is `(&'a K, &'a\nmut V)`.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type\nis `&'a K`.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. Iterator element\ntype is `&'a V`.",3,{"inputs":[{"name":"linearmap"}],"output":{"name":"values"}}],[11,"get","","Returns a reference to the value corresponding to the key.",3,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",3,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value to the specified key.",3,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, it is returned. Otherwise, `None` is returned.",3,{"inputs":[{"name":"linearmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key-value pair from the map. If the key had a value present\nin the map, it is returned. Otherwise, `None` is returned.",3,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[6,"Item","","",null,null],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[6,"Item","","",null,null],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[6,"Item","","",null,null],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"linearmap"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"par_vec","collect::proto","",null,null],[3,"ParVec","collect::proto::par_vec","A vector that can be operated on concurrently via non-overlapping slices.",null,null],[3,"ParSlice","","A slice of `ParVec` that can be sent to another task for processing.\nAutomatically releases the slice on drop.",null,null],[11,"new","","Create a new `ParVec`, returning it and a vector of slices that can be sent\nto other threads and mutated concurrently.",8,null],[11,"into_inner_opt","","Take the inner `Vec` if there are no slices remaining.\nReturns `Err(self)` if there are still slices out there.",8,{"inputs":[{"name":"parvec"}],"output":{"name":"result"}}],[11,"into_inner","","Take the inner `Vec`, waiting until all slices have been freed.",8,{"inputs":[{"name":"parvec"}],"output":{"name":"vec"}}],[6,"Target","","",null,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"parslice"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"StringJoiner"],[3,"Iter"],[3,"ImmutSList"],[3,"LinearMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ParVec"],[3,"ParSlice"]]};
searchIndex['ordered_iter'] = {"items":[[0,"","ordered_iter","Ordered iterators.",null,null],[3,"InnerJoinMapIterator","","",null,null],[3,"InnerJoinMapSetIterator","","",null,null],[3,"InnerJoinSetIterator","","",null,null],[3,"OuterJoinIterator","","",null,null],[8,"OrderedMapIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a map like structure",null,null],[16,"Key","ordered_iter::OrderedMapIterator","",null,null],[16,"Val","","",null,null],[11,"inner_join_map","ordered_iter","join two ordered maps together",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmapiterator"}}],[11,"inner_join_set","","filter an ordered map with an ordered set",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmapsetiterator"}}],[11,"outer_join","","Join an ordered iterator with the right ordered iterator. The\nnew iterator will return a key value pair for every key in\neither iterator. If a key is present in both iterators they\nwill be returned together (two values). If a value is in the Right,\nbut not the left iterator it will be return without the value in the\nleft iterator. If the value is in the left iterator by not the right\nthat will be return without the value from the left iterator.",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"outerjoiniterator"}}],[8,"OrderedSetIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a set like structure",null,null],[11,"inner_join_map","","join two ordered maps together",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinmapsetiterator"}}],[11,"inner_join_set","","filter an ordered map with an ordered set",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinsetiterator"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"innerjoinmapiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"innerjoinsetiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",4,{"inputs":[{"name":"innerjoinmapsetiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",5,{"inputs":[{"name":"outerjoiniterator"}],"output":{"name":"option"}}],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null]],"paths":[[8,"OrderedMapIterator"],[8,"OrderedSetIterator"],[3,"InnerJoinMapIterator"],[3,"InnerJoinSetIterator"],[3,"InnerJoinMapSetIterator"],[3,"OuterJoinIterator"]]};
initSearch(searchIndex);
