var searchIndex = {};
searchIndex['collect'] = {"items":[[0,"","collect","collect-rs is intended as an experimental extension of the Rust standard library's\nlibcollections. Ideas that are too niche, crazy, or experimental to land in libcollections\ncan be gathered here where they can gain the maintenance and network-effect benefits that\nlibcollections enjoys, but without worrying about such ivory tower concepts as\n\"general usefulness\" and \"consistency\".",null,null],[3,"TreeMap","","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper.",null,null],[3,"TreeSet","","An implementation of a set on top of the `TreeMap` container.",null,null],[11,"clone","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"eq","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"treemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"index","","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",0,{"inputs":[{"name":"treemap"},{"name":"c"}],"output":{"name":"treemap"}}],[11,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"c"}}],[11,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"keys"}}],[11,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"values"}}],[11,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"reviter"}}],[11,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"itermut"}}],[11,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"revitermut"}}],[11,"into_iter","","Gets a lazy iterator that consumes the treemap.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[11,"len","","Return the number of elements in the map.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all values.",0,{"inputs":[{"name":"treemap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",0,{"inputs":[{"name":"treemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[11,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[11,"from_iter","","",0,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":{"name":"treemap"}}],[11,"extend","","",0,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"treemap"},{"name":"h"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[11,"clone","","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"eq","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"treeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",1,{"inputs":[{"name":"treeset"},{"name":"c"}],"output":{"name":"treeset"}}],[11,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"c"}}],[11,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"reviter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[11,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"union"}}],[11,"len","","Return the number of elements in the set",1,{"inputs":[{"name":"treeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements",1,{"inputs":[{"name":"treeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",1,{"inputs":[{"name":"treeset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",1,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",1,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",1,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":{"name":"treeset"}}],[11,"extend","","",1,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":null}],[11,"hash","","",1,{"inputs":[{"name":"treeset"},{"name":"h"}],"output":null}],[11,"into_iter","","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[0,"iter","","",null,null],[8,"StringJoiner","collect::iter","An Iterator adapter that walks through all the elements in the Iterator,\nconverts them to Strings and joins them to one big String, seperated by\nsome seperator string slice.",null,null],[10,"join","","Converts all elements the Iterator yields to Strings,\nthen combines them all into one String, seperated by sep.",2,{"inputs":[{"name":"stringjoiner"},{"name":"str"}],"output":{"name":"string"}}],[0,"immut_slist","collect","",null,null],[3,"Iter","collect::immut_slist","An iterator over the items of an ImmutSList",null,null],[3,"ImmutSList","","An immutable singly-linked list, as seen in basically every functional language",null,null],[11,"clone","","",3,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"new","","Constructs a new, empty `ImmutSList`",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"append","","Returns a copy of the list, with `elem` appended to the front",4,{"inputs":[{"name":"immutslist"},{"name":"t"}],"output":{"name":"immutslist"}}],[11,"head","","Returns a reference to the first element in the list",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"option"}}],[11,"tail","","Returns a copy of the list, with the first element removed",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"tailn","","Returns a copy of the list, with the first `n` elements removed",4,{"inputs":[{"name":"immutslist"},{"name":"usize"}],"output":{"name":"immutslist"}}],[11,"last","","Returns the last element in the list",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"option"}}],[11,"lastn","","Returns a copy of the list, with only the last `n` elements remaining",4,{"inputs":[{"name":"immutslist"},{"name":"usize"}],"output":{"name":"immutslist"}}],[11,"iter","","Returns an iterator over references to the elements of the list in order",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"iter"}}],[11,"len","","",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"usize"}}],[11,"is_empty","","",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"drop","","",4,{"inputs":[{"name":"immutslist"}],"output":null}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"from_iter","","",4,{"inputs":[{"name":"immutslist"},{"name":"i"}],"output":{"name":"immutslist"}}],[11,"eq","","",4,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"immutslist"},{"name":"immutslist"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"immutslist"}],"output":{"name":"immutslist"}}],[11,"fmt","","",4,{"inputs":[{"name":"immutslist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,{"inputs":[{"name":"immutslist"},{"name":"h"}],"output":null}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[0,"tree_map","collect","",null,null],[3,"TreeMap","collect::tree_map","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper.",null,null],[3,"Iter","","Lazy forward iterator over a map",null,null],[3,"RevIter","","Lazy backward iterator over a map",null,null],[3,"IterMut","","Lazy forward iterator over a map that allows for the mutation of\nthe values.",null,null],[3,"RevIterMut","","Lazy backward iterator over a map",null,null],[3,"Keys","","TreeMap keys iterator.",null,null],[3,"Values","","TreeMap values iterator.",null,null],[3,"IntoIter","","Lazy forward iterator over a map that consumes the map while iterating",null,null],[11,"clone","collect","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"eq","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"treemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[6,"Output","collect::tree_map","",null,null],[11,"index","collect","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",0,{"inputs":[{"name":"treemap"},{"name":"c"}],"output":{"name":"treemap"}}],[11,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"c"}}],[11,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"keys"}}],[11,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"values"}}],[11,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"reviter"}}],[11,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"itermut"}}],[11,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"revitermut"}}],[11,"into_iter","","Gets a lazy iterator that consumes the treemap.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[11,"len","","Return the number of elements in the map.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all values.",0,{"inputs":[{"name":"treemap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",0,{"inputs":[{"name":"treemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[11,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[6,"Item","collect::tree_map","",null,null],[11,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[6,"Item","","",null,null],[11,"next","","",6,{"inputs":[{"name":"reviter"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[6,"Item","","",null,null],[11,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",7,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[6,"Item","","",null,null],[11,"next","","",8,{"inputs":[{"name":"revitermut"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[6,"Item","","",null,null],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[6,"Item","","",null,null],[11,"next","","",10,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[6,"Item","","",null,null],[11,"next","","",11,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"from_iter","collect","",0,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":{"name":"treemap"}}],[11,"extend","","",0,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"treemap"},{"name":"h"}],"output":null}],[6,"Item","collect::tree_map","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collect","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[6,"Key","collect::tree_map","",null,null],[6,"Val","","",null,null],[0,"tree_set","collect","",null,null],[3,"TreeSet","collect::tree_set","An implementation of a set on top of the `TreeMap` container.",null,null],[3,"Iter","","A lazy forward iterator over a set.",null,null],[3,"RevIter","","A lazy backward iterator over a set.",null,null],[3,"IntoIter","","A lazy forward iterator over a set that consumes the set while iterating.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"clone","collect","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"eq","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"treeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",1,{"inputs":[{"name":"treeset"},{"name":"c"}],"output":{"name":"treeset"}}],[11,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"c"}}],[11,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"reviter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",1,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[11,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"union"}}],[11,"len","","Return the number of elements in the set",1,{"inputs":[{"name":"treeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements",1,{"inputs":[{"name":"treeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",1,{"inputs":[{"name":"treeset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",1,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",1,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",1,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",1,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[6,"Item","collect::tree_set","",null,null],[11,"next","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[6,"Item","","",null,null],[11,"next","","",13,{"inputs":[{"name":"reviter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[6,"Item","","",null,null],[11,"next","","",14,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[6,"Item","","",null,null],[11,"next","","",15,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",16,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",17,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",18,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"from_iter","collect","",1,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":{"name":"treeset"}}],[11,"extend","","",1,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":null}],[11,"hash","","",1,{"inputs":[{"name":"treeset"},{"name":"h"}],"output":null}],[6,"Item","collect::tree_set","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collect","",1,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[0,"proto","","",null,null],[0,"linear_map","collect::proto","A module providing a map implementation `LinearMap` backed by a vector.",null,null],[3,"LinearMap","collect::proto::linear_map","A very simple map implementation backed by a vector.",null,null],[3,"Iter","","The iterator returned by `LinearMap::iter`.",null,null],[3,"IterMut","","The iterator returned by `LinearMap::iter_mut`.",null,null],[3,"Keys","","The iterator returned by `LinearMap::keys`.",null,null],[3,"Values","","The iterator returned by `LinearMap::values`.",null,null],[11,"default","","",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"clone","","",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"new","","Creates an empty map. This method does not allocate.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"with_capacity","","Creates an empty map with the given initial capacity.",19,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":{"name":"linearmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more to be inserted in the\nmap. The collection may reserve more space to avoid frequent\nreallocations.",19,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to\nbe inserted in the map.",19,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",19,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"len","","Returns the number of elements in the map.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all elements. Keeps the allocated memory for\nreuse.",19,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator\nelement type is `(&'a K, &'a V)`.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order with\nmutable references to the values. Iterator element type is `(&'a K, &'a\nmut V)`.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type\nis `&'a K`.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. Iterator element\ntype is `&'a V`.",19,{"inputs":[{"name":"linearmap"}],"output":{"name":"values"}}],[11,"get","","Returns a reference to the value corresponding to the key.",19,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",19,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value to the specified key.",19,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, it is returned. Otherwise, `None` is returned.",19,{"inputs":[{"name":"linearmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key-value pair from the map. If the key had a value present\nin the map, it is returned. Otherwise, `None` is returned.",19,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[6,"Item","","",null,null],[11,"next","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[6,"Item","","",null,null],[11,"next","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[6,"Item","","",null,null],[11,"next","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"clone","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",23,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next_back","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"linearmap"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"par_vec","collect::proto","",null,null],[3,"ParVec","collect::proto::par_vec","A vector that can be operated on concurrently via non-overlapping slices.",null,null],[3,"ParSlice","","A slice of `ParVec` that can be sent to another task for processing.\nAutomatically releases the slice on drop.",null,null],[11,"new","","Create a new `ParVec`, returning it and a vector of slices that can be sent\nto other threads and mutated concurrently.",24,null],[11,"into_inner_opt","","Take the inner `Vec` if there are no slices remaining.\nReturns `Err(self)` if there are still slices out there.",24,{"inputs":[{"name":"parvec"}],"output":{"name":"result"}}],[11,"into_inner","","Take the inner `Vec`, waiting until all slices have been freed.",24,{"inputs":[{"name":"parvec"}],"output":{"name":"vec"}}],[6,"Target","","",null,null],[11,"deref","","",25,null],[11,"deref_mut","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"parslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","collect::tree_map","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",5,null],[11,"size_hint","","",5,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next","","/// Advances the iterator to the next node (in order) and return a\n/// tuple with a reference to the key and value. If there are no\n/// more nodes, return `None`.",7,null],[11,"size_hint","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next","collect::tree_set","",12,null],[11,"size_hint","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next","","",15,null],[11,"next","","",16,null],[11,"next","","",17,null],[11,"next","","",18,null]],"paths":[[3,"TreeMap"],[3,"TreeSet"],[8,"StringJoiner"],[3,"Iter"],[3,"ImmutSList"],[3,"Iter"],[3,"RevIter"],[3,"IterMut"],[3,"RevIterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"RevIter"],[3,"IntoIter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"LinearMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ParVec"],[3,"ParSlice"]]};
searchIndex['ordered_iter'] = {"items":[[0,"","ordered_iter","Ordered iterators.",null,null],[3,"InnerJoinMapIterator","","",null,null],[3,"InnerJoinMapSetIterator","","",null,null],[3,"InnerJoinSetIterator","","",null,null],[3,"OuterJoinIterator","","",null,null],[8,"OrderedMapIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a map like structure",null,null],[16,"Key","ordered_iter::OrderedMapIterator","",null,null],[16,"Val","","",null,null],[11,"inner_join_map","ordered_iter","join two ordered maps together",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmapiterator"}}],[11,"inner_join_set","","filter an ordered map with an ordered set",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmapsetiterator"}}],[11,"outer_join","","Join an ordered iterator with the right ordered iterator. The\nnew iterator will return a key value pair for every key in\neither iterator. If a key is present in both iterators they\nwill be returned together (two values). If a value is in the Right,\nbut not the left iterator it will be return without the value in the\nleft iterator. If the value is in the left iterator by not the right\nthat will be return without the value from the left iterator.",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"outerjoiniterator"}}],[8,"OrderedSetIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a set like structure",null,null],[11,"inner_join_map","","join two ordered maps together",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinmapsetiterator"}}],[11,"inner_join_set","","filter an ordered map with an ordered set",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinsetiterator"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"innerjoinmapiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",3,{"inputs":[{"name":"innerjoinsetiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",4,{"inputs":[{"name":"innerjoinmapsetiterator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",5,{"inputs":[{"name":"outerjoiniterator"}],"output":{"name":"option"}}],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null],[6,"Key","","",null,null],[6,"Val","","",null,null]],"paths":[[8,"OrderedMapIterator"],[8,"OrderedSetIterator"],[3,"InnerJoinMapIterator"],[3,"InnerJoinSetIterator"],[3,"InnerJoinMapSetIterator"],[3,"OuterJoinIterator"]]};
searchIndex['compare'] = {"items":[[0,"","compare","Comparators.",null,null],[3,"Borrow","","A comparator that borrows its parameters before comparing them.",null,null],[3,"Extract","","A comparator that extracts a sort key from a value.",null,null],[3,"Then","","A comparator that [lexicographically]\n(https://en.wikipedia.org/wiki/Lexicographical_order) combines two others.",null,null],[3,"Natural","","A comparator that delegates to [`Ord`]\n(http://doc.rust-lang.org/std/cmp/trait.Ord.html).",null,null],[3,"Rev","","A comparator that reverses the ordering of another.",null,null],[3,"Swap","","A comparator that swaps another's parameters, maintaining the underlying ordering.",null,null],[5,"max","","Returns the maximum of two values according to the given comparator, or `lhs` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Returns the minimum of two values according to the given comparator, or `lhs` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"natural","","",null,{"inputs":[],"output":{"name":"natural"}}],[8,"Compare","","A comparator imposing a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"compare","","Compares two values, returning `Less`, `Equal`, or `Greater` if `lhs` is less\nthan, equal to, or greater than `rhs`, respectively.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"ordering"}}],[11,"compares_lt","","Checks if `lhs` is less than `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_le","","Checks if `lhs` is less than or equal to `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ge","","Checks if `lhs` is greater than or equal to `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_gt","","Checks if `lhs` is greater than `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_eq","","Checks if `lhs` is equal to `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ne","","Checks if `lhs` is not equal to `rhs`.",0,{"inputs":[{"name":"compare"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the comparator's parameters before comparing them.",0,{"inputs":[{"name":"compare"}],"output":{"name":"borrow"}}],[11,"rev","","Reverses the ordering of the comparator.",0,{"inputs":[{"name":"compare"}],"output":{"name":"rev"}}],[11,"swap","","Swaps the comparator's parameters, maintaining the underlying ordering.",0,{"inputs":[{"name":"compare"}],"output":{"name":"swap"}}],[11,"then","","[Lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) combines\nthe comparator with another.",0,{"inputs":[{"name":"compare"},{"name":"d"}],"output":{"name":"then"}}],[11,"compare","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_le","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ge","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_gt","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_eq","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ne","","",1,{"inputs":[{"name":"borrow"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"borrow"}],"output":{"name":"borrow"}}],[11,"default","","",1,{"inputs":[{"name":"borrow"}],"output":{"name":"borrow"}}],[11,"eq","","",1,{"inputs":[{"name":"borrow"},{"name":"borrow"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"borrow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"extract"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"extract"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[{"name":"extract"}],"output":{"name":"extract"}}],[11,"fmt","","",2,{"inputs":[{"name":"extract"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"extract"}],"output":{"name":"extract"}}],[11,"new","","Returns a comparator that extracts a sort key using `ext` and compares it using\n`cmp`.",2,{"inputs":[{"name":"extract"},{"name":"e"},{"name":"c"}],"output":{"name":"extract"}}],[11,"compare","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"then"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"then"},{"name":"then"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"then"},{"name":"then"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[{"name":"then"}],"output":{"name":"then"}}],[11,"clone","","",3,{"inputs":[{"name":"then"}],"output":{"name":"then"}}],[11,"compare","","",3,{"inputs":[{"name":"then"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"ordering"}}],[11,"compare","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"natural"}],"output":{"name":"natural"}}],[11,"default","","",4,{"inputs":[{"name":"natural"}],"output":{"name":"natural"}}],[11,"eq","","",4,{"inputs":[{"name":"natural"},{"name":"natural"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"natural"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"rev"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rev"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"clone","","",5,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"compare","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_le","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ge","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_gt","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_eq","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"compares_ne","","",5,{"inputs":[{"name":"rev"},{"name":"lhs"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"swap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"swap"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"swap"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[{"name":"swap"}],"output":{"name":"swap"}}],[11,"clone","","",6,{"inputs":[{"name":"swap"}],"output":{"name":"swap"}}],[11,"compare","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}],[11,"compares_le","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}],[11,"compares_ge","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}],[11,"compares_gt","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}],[11,"compares_eq","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}],[11,"compares_ne","","",6,{"inputs":[{"name":"swap"},{"name":"rhs"},{"name":"lhs"}],"output":{"name":"bool"}}]],"paths":[[8,"Compare"],[3,"Borrow"],[3,"Extract"],[3,"Then"],[3,"Natural"],[3,"Rev"],[3,"Swap"]]};
initSearch(searchIndex);
